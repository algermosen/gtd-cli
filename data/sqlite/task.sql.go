// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task.sql

package database

import (
	"context"
)

const createItem = `-- name: CreateItem :exec
INSERT INTO tasks (
    name, done, created, type 
) VALUES (
    ?, ?, ?, ?
)
`

type CreateItemParams struct {
	Name    string      `json:"name"`
	Done    interface{} `json:"done"`
	Created int64       `json:"created"`
	Type    int64       `json:"type"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) error {
	_, err := q.db.ExecContext(ctx, createItem,
		arg.Name,
		arg.Done,
		arg.Created,
		arg.Type,
	)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const listTasks = `-- name: ListTasks :many
SELECT id, name, done, created, type 
FROM tasks
WHERE type = ?
`

func (q *Queries) ListTasks(ctx context.Context, type_ int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Done,
			&i.Created,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET name = ?
WHERE id = ?
`

type UpdateTaskParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Name, arg.ID)
	return err
}
