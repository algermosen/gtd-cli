// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: task.sql

package database

import (
	"context"
)

const checkAllTasks = `-- name: CheckAllTasks :exec
UPDATE tasks
SET done = DATE()
WHERE done is null
`

func (q *Queries) CheckAllTasks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, checkAllTasks)
	return err
}

const checkTask = `-- name: CheckTask :exec
UPDATE tasks
SET done = DATE()
WHERE id = ?
`

func (q *Queries) CheckTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, checkTask, id)
	return err
}

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (
    name, created, type, done
) VALUES (
    ?, ?, ?, null
)
`

type CreateTaskParams struct {
	Name    string `json:"name"`
	Created int64  `json:"created"`
	Type    int64  `json:"type"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.ExecContext(ctx, createTask, arg.Name, arg.Created, arg.Type)
	return err
}

const deleteAllTasks = `-- name: DeleteAllTasks :exec
DELETE FROM tasks
`

func (q *Queries) DeleteAllTasks(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllTasks)
	return err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = ?
`

func (q *Queries) DeleteTask(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTask, id)
	return err
}

const listTasks = `-- name: ListTasks :many
SELECT id, name, done, created, type 
FROM tasks
WHERE type = ?
`

func (q *Queries) ListTasks(ctx context.Context, type_ int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, type_)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Done,
			&i.Created,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const moveTask = `-- name: MoveTask :exec
UPDATE tasks
SET type = ?
WHERE id = ?
`

type MoveTaskParams struct {
	Type int64 `json:"type"`
	ID   int64 `json:"id"`
}

func (q *Queries) MoveTask(ctx context.Context, arg MoveTaskParams) error {
	_, err := q.db.ExecContext(ctx, moveTask, arg.Type, arg.ID)
	return err
}

const updateTask = `-- name: UpdateTask :exec
UPDATE tasks
SET name = ?
WHERE id = ?
`

type UpdateTaskParams struct {
	Name string `json:"name"`
	ID   int64  `json:"id"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Name, arg.ID)
	return err
}
